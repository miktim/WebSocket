# Java SE lightweight WebSocket client/server package,  MIT (c) 2020 miktim@mail.ru
New look: https://github.com/miktim/WebSocket/tree/new

Release notes:
  - java SE 1.7+, Android compatible;
  - in accordance with RFC-6455: https://tools.ietf.org/html/rfc6455;
  - WebSocket version: 13;
  - WebSocket extensions not supported;
  - secure connections implemented without client authentication.

Overview (setter marked with * has corresponding getter):

  Server constructors:
    WsServer(int bindPort, WsHandler handler) throws NullPointerException;
    WsServer(InetSocketAddress bindAddr, WsHandler handler) throws NullPointerException;
    WssServer(int bindPort, WsHandler handler) throws NullPointerException;
    WssServer(InetSocketAddress bindAddr, WsHandler handler) throws NullPointerException;

    Constants (may vary):
      int DEFAULT_SERVER_PORT;
      int DEFAULT_MAX_CONNECTIONS = 8;
    Methods:
      void setMaxConnections(int max) throws IllegalArgumentException; //*
      void setMaxMessageLength(int len) throws IllegalArgumentException; //* incoming messages
      void setHandshakeSoTimeout(int millis); //* opening/closing handshake
      void setConnectionSoTimeout(int millis, boolean enablePing); //*
      boolean isPingEnabled();
      boolean isRunning();
      boolean isSecure();
      void start() throws Exception;
      void stop(); // closes all active connections

  Interface:
    WsHandler  see: https://github.com/miktim/WsServer/blob/master/srcs/WsHandler.java

  WsConnection:
    Constants (may vary):
      String VERSION = "1.2.0";
      int DEFAULT_HANDSHAKE_SO_TIMEOUT = 5000;
      int DEFAULT_CONNECTION_SO_TIMEOUT = 10000; // ping enabled
      int DEFAULT_MAX_MESSAGE_LENGTH = 4096; // incoming messages

      WebSocket closure status codes:
         NORMAL_CLOSURE, GOING_AWAY, PROTOCOL_ERROR, UNSUPPORTED_DATA, NO_STATUS,
         ABNORMAL_CLOSURE, INVALID_DATA, POLICY_VIOLATION, MESSAGE_TOO_BIG,
         UNSUPPORTED_EXTENSION, INTERNAL_ERROR, TRY_AGAIN_LATER
      See:
         https://tools.ietf.org/html/rfc6455#section-7.4
         https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
         https://www.iana.org/assignments/websocket/websocket.xml#close-code-number

    Methods:
      static void setKeyFile(File keyFile, String passphrase); // to jvm trustStore
      void setMaxMessageLength(int len) throws IllegalArgumentException; //* incoming messages
      void setHandshakeSoTimeout(int millis); //*
      void setConnectionSoTimeout(int millis, boolean enablePing); //*
      boolean isPingEnabled();
      void setHandler(WsHandler handler) throws NullPointerException; //*
      boolean isOpen();
      boolean isSecure();
      boolean isClientSide();
      String getPath();
      String getPeerHost();
      void send(String message) throws IOException;
      void send(byte[] message) throws IOException;
      void streamText(InputStream is) throws IOException;
      void streamBinary(InputStream is) throws IOException;
      void close(); // close without status code
      void close(int statusCode);
      void close(int statusCode, String reason); // a reason longer than 123 bytes is truncated
      int getClosureStatus();
      String getClosureReason();

  Client connection constructor:
    WsConnection(String uri, WsHahdler handler) throws Exception;

    Methods:
      void open() throws Exception;

Usage example see in:
  https://github.com/miktim/WebSocket/blob/master/test/WsClientTest.java
  https://github.com/miktim/WebSocket/blob/master/test/WsServerTest.java
