# Java SE WebSocket listener/connector,  MIT (c) 2020 miktim@mail.ru
Down with the client-server paradigm!
Traditional approach: https://github.com/miktim/WebSocket/tree/master

Release notes:
  - java SE 1.7+, Android compatible;
  - in accordance with RFC-6455: https://tools.ietf.org/html/rfc6455;
  - WebSocket version: 13;
  - WebSocket extensions not supported;
  - incoming message length is limited to 2147483647 bytes (Integer.MAX_VALUE).
    Note: large messages can throw handled java.lang.OutOfMemoryError;
  - secure connections implemented without client authentication.

Overview:
  Constructors:
    WebSocket() throws Exception;
    WebSocket(InetAddress bindAddr) throws Exception;

    Methods:
      static void setKeystore(File keyFile, String passphrase);
      void setHandshakeSoTimeout(int millis); 
      void setConnectionSoTimeout(int millis, boolean enablePing);
      WsListener listen(int port, WsHandler handler) throws Exception; //
      WsListener listenSafely(int port, WsHandler handler) throws Exception; //
      WsListener[] listListeners(); //++
      WsConnection connect(String uri, WsHahdler handler) throws Exception;
      WsConnection[] listConnections(); //++
      void closeAll();

  Interface:
    WsHandler  see: https://github.com/miktim/WsServer/blob/new/srcs/WsHandler.java

  WsListener:
    Methods:
      boolean isOpen();
      boolean isSecure();
      WsConnection[] listConnections(); //++
      void close();

  WsConnection:
    Constants (may vary):
      String VERSION = "2.1.0";
      int DEFAULT_HANDSHAKE_SO_TIMEOUT = 5000;  // milliseconds, open/close handshake
      int DEFAULT_CONNECTION_SO_TIMEOUT = 20000;// milliseconds, ping enabled

      WebSocket closure status codes:
         NORMAL_CLOSURE, GOING_AWAY, PROTOCOL_ERROR, UNSUPPORTED_DATA, NO_STATUS,
         ABNORMAL_CLOSURE, INVALID_DATA, POLICY_VIOLATION, MESSAGE_TOO_BIG,
         UNSUPPORTED_EXTENSION, INTERNAL_ERROR, TRY_AGAIN_LATER
      See:
         https://tools.ietf.org/html/rfc6455#section-7.4
         https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
         https://www.iana.org/assignments/websocket/websocket.xml#close-code-number

    Methods:
      void setHandler(WsHandler handler) throws NullPointerException;
      boolean isOpen();
      boolean isSecure();
      boolean isListenerSide();
      String getPath();
      String getPeerHost();
      void send(String message) throws IOException;
      void send(byte[] message) throws IOException;
      void send(InputStream is, boolean isUTF8Text) throws IOException; //++
      void close(); // close without status code
      void close(int statusCode, String reason); // a reason longer than 123 bytes is truncated
      int getClosureCode();
      String getClosureReason();

Usage example see in:
  https://github.com/miktim/WebSocket/blob/new/test/WsConnectionTest.java
  https://github.com/miktim/WebSocket/blob/new/test/WsListenerTest.java
