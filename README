# Java SE WebSocket client/server,  MIT (c) 2020-2023 miktim@mail.ru

Release notes:
    - Java SE 7+, Android (see WebSocket-Android-Test repo) compatible;
    - in accordance with RFC6455: https://datatracker.ietf.org/doc/html/rfc6455/ ;
    - supported WebSocket version: 13;
    - WebSocket extensions are not supported;
    - supports SSL/TLS connections (without client auth and tunneling);
    - stream-based messaging (incoming WebSocket messages are represented by input streams);
    - support for Internationalized Domain Names (IDNs) is provided by user.

package org.miktim.websocket

Overview:

  Class WebSocket:
    Constant:
      static String VERSION = "3.3.2a";
    Constructors:
      WebSocket() throws NoSuchAlgorithmException; // check if SHA1 exists
      WebSocket(InetAddress bindAddr)
         throws SocketException, NoSuchAlgorithmException;
    Methods:
    // To cancel the registration of the key, specify a non-existent file
    // and an empty password. For example: 
    //   WebSocket.setKeyStore("/nonexistentfile","")
      static void setKeyStore(String keyFilePath, String passphrase); 
    //  set system  properties javax.net.ssl.keytStore/keyStorePassword (listener)
      static void setTrustStore(String keyFilePath, String passphrase);
    //  set system properties javax.net.ssl.trustStore/trustStorePassword (client)

      WsListener listen(int port, WsHandler handler, WsParameters wsp)
         throws IOException, GeneralSecurityException; 
    // serve plain connections 
      WsListener listenSafely(int port, WsHandler handler, WsParameters wsp)
         throws IOException, GeneralSecurityException;
    // serve TLS connections
      WsConnection connect(String uri, WsHahdler handler, WsParameters wsp)
         throws URISyntaxException, IOException, GeneralSecurityException;
    // uri's scheme (ws: | wss:) and host are required, user-info@ and #fragment - ignored
      InetAddress getBindAddress();
      WsListener[] listListeners();
      WsConnection[] listConnections();
      void closeAll(); 
    // close all created listeners/connections, code 1001 (GOING_AWAY)
      void closeAll(String closeReason); // close code 1001 (GOING_AWAY)

  Interface WsHandler:
    There are three scenarios for handling events:
      - onError, on the listener side when the ServerSocket failed;
      - onError - onClose, when the SSL/WebSocket handshake failed;
      - onOpen - [onMessage - onMessage - ...] - [onError] - onClose.

    Methods:
      void onOpen(WsConnection conn, String subProtocol);
    // - the second argument is the negotiated WebSocket subprotocol or null.    
      void onMessage(WsConnection conn, InputStream is, boolean isUTF8Text);
    // - messages are processed asynchronously;
    // - the message is an InputStream of binary data or UTF-8 encoded text;
    // - exiting the handler closes the stream (not connection!).
      void onError(WsConnection conn, Throwable e);
    // - any exception closes the WebSocket connection;
    // - large incoming messages may throw an OutOfMemoryError;
    // - conn is null on the listener side when the ServerSocket failed.
    //   The listener and all associated connections will be closed
      void onClose(WsConnection conn, WsStatus closeStatus);

  Class WsParameters:
    Constructor:
      WsParameters();
    Methods:
      WsParameters setSubProtocols(String[] subps); 
    // set WebSocket subProtocols in preferred order
      String[] getSubProtocols(); // null is default
      WsParameters setHandshakeSoTimeout(int millis);
    // TLS and WebSocket open/close handshake timeout
      int getHandshakeSoTimeout();
      WsParameters setConnectionSoTimeout(int millis, boolean pingEnabled)
    //  data exchange timeout
      int getConnectionSoTimeout();
      boolean isPingEnabled(); // enabled by default
      WsParameters setPayloadBufferLength(int len); 
    // outgoing messages max payload length, min len = 126 bytes
      int getPayloadBufferLength();
      WsParameters setBacklog(int num);
    // maximum number of pending connections on the ServerSocket 
      int getBacklog(); // default value is -1: system depended
      WsParameters setSSLParameters(SSLParameters sslParms);
    // javax.net.ssl.SSLParameters
      SSLParameters getSSLParameters(); // created with setNeedClientAuth=false

  Class WsListener extends Thread:
    Methods:
      boolean isOpen();
      boolean isSecure();
      int getPort();
    // returns the port number on which this socket is listening.
      InetSocketAddress getInetSocketAddress();
    // get ServerSocket bind info (java.net.InetSocketAddress)
      WsParameters getParameters();
      WsConnection[] listConnections();
      void close(); // also closes all associated connections (close code 1001)
      void close(String closeReason);

  Class WsConnection extends Thread:
    Methods:
      void send(InputStream is, boolean isUTF8Text) throws IOException; 
    // input stream of binary data or UTF-8 encoded text
      void send(String message) throws IOException; // send text
      void send(byte[] message) throws IOException; // send binary data
      void close(); // close without status code (NO_STATUS)
      void close(int statusCode, String reason); 
    // - the status code outside 1000-4999 will be replaced with 1005 (NO_STATUS),
    //   the reason is ignored;
    // - a reason that is longer than 123 BYTES is truncated;
    // - the method blocks outgoing messages (sending methods throw IOException);
    // - isOpen() returns false;
    // - incoming messages are available until the closing handshake completed.
      void setHandler(WsHandler newHandler); 
    // calls onClose in the old handler, then calls onOpen in the new handler
      WsStatus getStatus();
      String getSubProtocol(); // returns null or handshaked WebSocket subprotocol
      boolean isClientSide();  // returns true for client connections 
      boolean isOpen();     // WebSocket connection is open
      boolean isSecure();   // is SSL/TLS connection
      String getSSLSessionProtocol() // returns SSL protocol or null
      String getPeerHost(); // returns remote host name
      int getPort()      // returns connected port
      String getPath();  // returns http request path or null
      String getQuery(); // returns http request query or null
      WsParameters getParameters();
      WsConnection[] listConnections() // the client side returns only itself 

  Class WsStatus:
    Parameters:
      int code;         // closing code (1000-4999)
      String reason;    // closing reason (max length 123 BYTES)
      boolean wasClean; // WebSocket closing handshake completed cleanly
      boolean remotely; // closed remotely
      Throwable error;  // closing exception or null

Usage examples see in:
  ./test/websocket/WssConnectionTest.java
  ./test/websocket/WsListenerTest.java
  ./test/websocket/WssClientTest.java
