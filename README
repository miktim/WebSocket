# Java SE/Android WebSocket client/server package,  MIT (c) 2020-2023 miktim@mail.ru

Release notes:
  - small and easy to use;
  - Java SE 6+/Android 4.1+ compatible (see WebSocket-Android-Test repo:
    https://github.com/miktim/WebSocket-Android-Test ).
  - in accordance with RFC6455: https://datatracker.ietf.org/doc/html/rfc6455/ ;
  - supported WebSocket version: 13;
  - WebSocket extensions are not supported;
  - supports cleartext/TLS connections (without tunneling);
  - supports Internationalized Domain Names (IDNs);
  - incoming WebSocket messages are represented by input streams.
  
The jar ./dist/websocket file was generated with debugging info using JDK1.8.0 for target JDK 6

package org.miktim.websocket

Overview:

  Class WebSocket:
    Servers and client connections creator.

    Constant:
      static String VERSION = "4.1.0";

    Constructors:
      WebSocket() throws NoSuchAlgorithmException; // check if SHA1 exists
      WebSocket(InetAddress bindAddr) throws SocketException, NoSuchAlgorithmException;
        - sets servers/connections binding address

    Methods:
      static URI idnURI(String uri) throws URISyntaxException;
        - converts the host name to the IDN form as defined in RFC3490
          and creates a URI
          
      static void setKeyStore(String keyFilePath, String password); 
        - sets system properties javax.net.ssl.keyStore/keyStorePassword
      static void setTrustStore(String keyFilePath, String password);
        - sets system properties javax.net.ssl.trustStore/trustStorePassword

      void setKeyFile(File keyfile, String password);
        - sets keyStore file (server) or trustStore file (client connection)
      void resetKeyFile();

      WsServer Server(int port, WsConnection.EventHandler handler, WsParameters wsp) throws IOException, GeneralSecurityException; 
        - creates cleartext connections server
 
      WsServer SecureServer(int port, WsConnection.EventHandler handler, WsParameters wsp) throws IOException, GeneralSecurityException;
        - creates TLS connections server
        Servers are created using a "dumb" server handler. 
        You can set your own handler or start the server immediately.

      WsConnection connect(String uri, WsConnection.EventHandler handler, WsParameters wsp) throws URISyntaxException, IOException, GeneralSecurityException;
        - creates and starts a client connection;
        - uri's scheme (ws: | wss:) and host are required,
          user-info@ and #fragment - ignored

      InetAddress getBindAddress();
      WsServer[] listServers(); // lists active servers
      WsConnection[] listConnections(); // lists active connections
      
      void closeAll(); 
      void closeAll(String closeReason);
        - closes all active servers/connections, code 1001 (GOING_AWAY)
        

  Class WsServer extends Thread:
  
    Methods:
      WsServer setHandler(WsServer.EventHandler handler);
      void start(); // starts server
      WsServer launch(); // starts server
      
      boolean isOpen(); // returns the open state
      boolean isInterrupted(); // returns the interruption state
      boolean isSecure(); // is secure server
      int getPort();
        - returns the port number on which this socket is listening.
      InetAddress getBindAddress();
        - returns the ServerSocket binding address or null
      WsParameters getParameters(); // returns connection parameters
      WsConnection[] listConnections(); // returns a list of active connections

      void close(); 
      void close(String closeReason);
        - close methods also closes all associated connections (code GOING_AWAY)
      void interrupt();
        - interrupts the server, associated connections stay alive and can be closed in the usual way

        
  Interface WsServer.EventHandler:
    Methods:
      void onStart(WsServer server);

      boolean onAccept(WsServer server, WsConnection conn);
        - called BEFORE WebSocket connection handshake;
        - the returned value of true means approval of the connection,
          the value of false means the closure of the client connection

      void onStop(WsServer server, Exception error);
        - error is a ServerSocket exception or null


  Class WsConnection extends Thread:
    Constant:
      MESSAGE_QUEUE_CAPACITY = 3 
        - queue overflow leads to an error and connection closure

    Methods:
      void send(InputStream is, boolean isUTF8Text) throws IOException; 
        - is: input stream of binary data or UTF-8 encoded text
      void send(String message) throws IOException; // send text
      void send(byte[] message) throws IOException; // send binary data
      
      boolean isClientSide();  // returns true for client connections 
      boolean isOpen();     // WebSocket connection is open
      boolean isSecure();   // is TLS connection

      void setHandler(WsConnection.EventHandler newHandler); 
        - calls onClose in the old handler,
          then calls onOpen in the new handler

      WsConnection[] listConnections() // the client connection returns only itself 
      String getSSLSessionProtocol() // returns SSL protocol or null
      WsStatus getStatus();
        - returns the connection status, syncs with the completion of the open handshake
      String getSubProtocol(); // returns null or handshaked WebSocket subprotocol
      String getPeerHost(); // returns remote host name or null
      int getPort()      // returns connected port
      String getPath();  // returns http request path or null
      String getQuery(); // returns http request query or null
      WsParameters getParameters();

      void close(); // closes connection with status code 1005 (NO_STATUS)
      void close(int statusCode, String reason); 
        - the status code outside 1000-4999 will be replaced with 1005 (NO_STATUS), the reason is ignored;
        - a reason that is longer than 123 BYTES is truncated;
        - the method blocks outgoing messages (sending methods throw IOException);
        - isOpen() returns false;
        - incoming messages are available until the closing handshake completed.
        

  Interface WsConnection.EventHandler:
    There are two scenarios for handling events:
      - onError - onClose, when the SSL/WebSocket handshake failed;
      - onOpen - [onMessage - onMessage - ...] - [onError] - onClose.

    Methods:
      void onOpen(WsConnection conn, String subProtocol);
        - the second argument is the negotiated WebSocket subprotocol or null.
    
      void onMessage(WsConnection conn, InputStream is, boolean isUTF8Text);
        - the message is an InputStream of binary data or UTF-8 encoded text;
        - the available() method returns the total number of bytes in the stream;
        - exiting the handler closes the stream (not connection!).

      void onError(WsConnection conn, Throwable e);
        - any exception closes the WebSocket connection;
        - large incoming messages may throw an OutOfMemoryError;

      void onClose(WsConnection conn, WsStatus closeStatus);
      

  Class WsParameters:
    WebSocket connection parameters
    
    Constructor:
      WsParameters();

    Methods:
      WsParameters setSubProtocols(String[] subps); 
        - sets WebSocket subProtocols in preferred order
      String[] getSubProtocols(); // null is default
      WsParameters setHandshakeSoTimeout(int millis);
        - sets TLS and WebSocket open/close handshake timeout
      int getHandshakeSoTimeout();
      WsParameters setConnectionSoTimeout(int millis, boolean pingEnabled)
        - sets data exchange timeout
      int getConnectionSoTimeout();
      boolean isPingEnabled(); // enabled by default
      WsParameters setPayloadBufferLength(int len); 
        - sets outgoing messages max payload length, min len = 125 bytes
      int getPayloadBufferLength();
      WsParameters setMaxMessageLength(int len); 
        - sets incoming messages max length. If exceeded, the connection will be terminated with the MESSAGE_TOO_BIG status code
      int getMaxMessageLength(); // default: 1 MiB
      WsParameters setSSLParameters(SSLParameters sslParms);
        - sets javax.net.ssl.SSLParameters;
        - SSLParameters used by server:
          Protocols, CipherSuites, NeedClientAut, WantClientAuth
      SSLParameters getSSLParameters(); // defaults from the SSLContext 

      WsParameters setBacklog(int num);
        - maximum number of pending connections on the ServerSocket 
      int getBacklog(); // default value is -1: system depended
      

  Class WsStatus:
    Connection status
    
    Parameters:
      int code;         // closing code (1000-4999)
      String reason;    // closing reason (max length 123 BYTES)
      boolean wasClean; // WebSocket closing handshake completed cleanly
      boolean remotely; // closed remotely
      Throwable error;  // closing exception or null
      

Usage examples see in:
  ./test/websocket/WssConnectionTest.java
  ./test/websocket/WsServerTest.java
  ./test/websocket/WssClientTest.java
