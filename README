# Java SE/Android WebSocket client/server package,  MIT (c) 2020-2023 miktim@mail.ru

Release notes:
  - small and easy to use;
  - Java SE 6+/Android compatible (see WebSocket-Android-Test repo:
    https://github.com/miktim/WebSocket-Android-Test ).
  - in accordance with RFC6455: https://datatracker.ietf.org/doc/html/rfc6455/ ;
  - supported WebSocket version: 13;
  - WebSocket extensions are not supported;
  - supports cleartext/TLS connections (without tunneling);
  - supports Internationalized Domain Names (IDNs);
  - incoming WebSocket messages are represented by input streams.
  
The ./dist/websocket jar file was built using JDK 1.8.0 with the target JDK 6

package org.miktim.websocket

Overview:

  Class WebSocket:
    Creates and starts connections/servers.

    Constant:
      static String VERSION = "4.0.1";

    Constructors:
      WebSocket() throws NoSuchAlgorithmException; // check if SHA1 exists
      WebSocket(InetAddress bindAddr)
         throws SocketException, NoSuchAlgorithmException;

    Methods:
      static URI idnURI(String uri) throws URISyntaxException;
        - converts host name as defined by RFC3490 and creates URI
      static void setKeyStore(String keyFilePath, String password); 
        - set system  properties javax.net.ssl.keyStore/keyStorePassword
      static void setTrustStore(String keyFilePath, String password);
        - set system properties javax.net.ssl.trustStore/trustStorePassword

      void setKeyFile(File keyfile, String password);
        - set keyStore file (server) or trustStore file (client connection)
      void resetKeyFile()

      WsServer Server(int port, WsConnection.EventHandler handler, WsParameters wsp)
         throws IOException, GeneralSecurityException; 
        - creates cleartext connections server
 
      WsServer SecureServer(int port, WsConnection.EventHandler handler, WsParameters wsp)
         throws IOException, GeneralSecurityException;
        - creates TLS connections server
        Servers are created using a "dumb" server handler. 
        You can set your own handler or start the server immediately.

      WsConnection connect(String uri, WsConnection.EventHandler handler, WsParameters wsp)
         throws URISyntaxException, IOException, GeneralSecurityException;
        - creates and starts a client connection;
        - uri's scheme (ws: | wss:) and host are required,
          user-info@ and #fragment - ignored

      InetAddress getBindAddress();
      WsServer[] listServers();
      WsConnection[] listConnections();
      void closeAll(); 
        - close all created servers/connections, code 1001 (GOING_AWAY)
      void closeAll(String closeReason); // close code 1001 (GOING_AWAY)

  Class WsServer extends Thread:
    Methods:
      WsServer setHandler(WsServer.EventHandler handler);
      void start(); // start server
      WsServer launch(); // start server
      boolean isOpen();
      boolean isInterrupted(); // ServerSocket error or interrupt
      boolean isSecure();
      int getPort();
        - returns the port number on which this socket is listening.
      InetAddress getBindAddress();
        - returns ServerSocket bind address or null
      WsParameters getParameters();
      WsConnection[] listConnections();
      void close(); 
      void close(String closeReason);
        - close methods also closes all associated connections (code GOING_AWAY)
      void interrupt();
        - server interupted, associated connections stay alive and can be
          closed in the usual way

  Interface WsServer.EventHandler:
    Methods:
      void onStart(WsServer server);

      boolean onAccept(WsServer server, WsConnection conn);
        - called BEFORE WebSocket connection handshake;
        - the returned value of true means approval of the connection,
          the value of false means the closure of the client connection

      void onStop(WsServer server, Exception error);
        - the error is null or a ServerSocket exception if occured

  Class WsConnection extends Thread:
    Constant:
      MESSAGE_QUEUE_CAPACITY = 3 
        - queue overflow leads to an error and connection closure

    Methods:
      void send(InputStream is, boolean isUTF8Text) throws IOException; 
        - is - input stream of binary data or UTF-8 encoded text
      void send(String message) throws IOException; // send text
      void send(byte[] message) throws IOException; // send binary data
      void close(); // close without status code (NO_STATUS)
      void close(int statusCode, String reason); 
        - the status code outside 1000-4999 will be replaced with 1005 (NO_STATUS),
          the reason is ignored;
        - a reason that is longer than 123 BYTES is truncated;
        - the method blocks outgoing messages (sending methods throw IOException);
        - isOpen() returns false;
        - incoming messages are available until the closing handshake completed.
      boolean isClientSide();  // returns true for client connections 
      boolean isOpen();     // WebSocket connection is open
      boolean isSecure();   // is TLS connection

      void setHandler(WsConnection.EventHandler newHandler); 
        - calls onClose in the old handler, then calls onOpen in the new handler

      WsConnection[] listConnections() // the client side returns only itself 
      String getSSLSessionProtocol() // returns SSL protocol or null
      WsStatus getStatus();
      String getSubProtocol(); // returns null or handshaked WebSocket subprotocol
      String getPeerHost(); // returns remote host name or null
      int getPort()      // returns connected port
      String getPath();  // returns http request path or null
      String getQuery(); // returns http request query or null
      WsParameters getParameters();

  Interface WsConnection.EventHandler:
    There are two scenarios for handling events:
        - onError - onClose, when the SSL/WebSocket handshake failed;
        - onOpen - [onMessage - onMessage - ...] - [onError] - onClose.

    Methods:
      void onOpen(WsConnection conn, String subProtocol);
        - the second argument is the negotiated WebSocket subprotocol or null.
    
      void onMessage(WsConnection conn, InputStream is, boolean isUTF8Text);
        - the message is an InputStream of binary data or UTF-8 encoded text;
        - exiting the handler closes the stream (not connection!).

      void onError(WsConnection conn, Throwable e);
        - any exception closes the WebSocket connection;
        - large incoming messages may throw an OutOfMemoryError;

      void onClose(WsConnection conn, WsStatus closeStatus);

  Class WsParameters:
    Constructor:
      WsParameters();

    Methods:
      WsParameters setSubProtocols(String[] subps); 
        - set WebSocket subProtocols in preferred order
      String[] getSubProtocols(); // null is default
      WsParameters setHandshakeSoTimeout(int millis);
        - TLS and WebSocket open/close handshake timeout
      int getHandshakeSoTimeout();
      WsParameters setConnectionSoTimeout(int millis, boolean pingEnabled)
        - data exchange timeout
      int getConnectionSoTimeout();
      boolean isPingEnabled(); // enabled by default
      WsParameters setPayloadBufferLength(int len); 
        - outgoing messages max payload length, min len = 125 bytes
      int getPayloadBufferLength();
      WsParameters setMaxMessageLength(int len); 
        - incoming messages max length. If exceeded, the connection 
          will be terminated with the MESSAGE_TOO_BIG status code
      int getMaxMessageLength(); // default: 1 MiB
      WsParameters setSSLParameters(SSLParameters sslParms);
        - javax.net.ssl.SSLParameters used:
          Protocols, CipherSuites, NeedClientAut, WantClientAuth
      SSLParameters getSSLParameters();

      WsParameters setBacklog(int num);
        - maximum number of pending connections on the ServerSocket 
      int getBacklog(); // default value is -1: system depended

  Class WsStatus:
    Parameters:
      int code;         // closing code (1000-4999)
      String reason;    // closing reason (max length 123 BYTES)
      boolean wasClean; // WebSocket closing handshake completed cleanly
      boolean remotely; // closed remotely
      Throwable error;  // closing exception or null

Usage examples see in:
  ./test/websocket/WssConnectionTest.java
  ./test/websocket/WsListenerTest.java
  ./test/websocket/WssClientTest.java
